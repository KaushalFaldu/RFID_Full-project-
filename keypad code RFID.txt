#include "SPI.h"
#include "MFRC522.h"
#include <LiquidCrystal_I2C.h>
#include <Ethernet.h>
LiquidCrystal_I2C lcd(0x27, 16, 2);
#include <Keypad.h>
int ikey;

char value;
#define SS_PIN 3
#define RST_PIN 9

MFRC522 rfid(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;

const byte ROW_NUM = 4; //four rows
const byte COLUMN_NUM = 3; //three columns


char keys[ROW_NUM][COLUMN_NUM] = {
  {'1', '2', '3'},
  {'4', '5', '6'},
  {'7', '8', '9'},
  {'*', '0', '#'}
};



byte pin_rows[ROW_NUM] = {8, 7, 6, 5}; //connect to the row pinouts of the keypad
byte pin_column[COLUMN_NUM] = {4, 3, 2}; //connect to the column pinouts of the keypad


//Keypad keypad();
Keypad  kp = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM );

byte mac[] = { 0x00, 0xAB, 0xBC, 0xCC, 0xDE, 0x01 };



void setup() {
  lcd.init();
  lcd.backlight();


  Serial.begin(9600);
  SPI.begin();
  rfid.PCD_Init();
  pinMode(A2, OUTPUT);
  pinMode(A3, OUTPUT);
  if (Ethernet.begin(mac) == 0) {
    Serial.println("Failed to obtaining an IP address using DHCP");
    digitalWrite(A2, HIGH);
    lcd.clear();
    lcd.setCursor (0, 0);
    lcd.print("IP not found");
     delay(3000);
    digitalWrite(A2, LOW);
    while (true);
  }
  Serial.println("setup comp.");
  delay(500);
}

void loop() {

  char data[40] = "";

  lcd.setCursor (0, 0);
  lcd.clear();
  lcd.print("waiting for card..");
  Serial.println("Ethernet Configured");
  Serial.println("waiting for card...");
  
  char value=0;
  int ikey=0;
  while (value != '*') {
    value = kp.getKey();

    if (value) {
       if (value == '#') {
          ikey = 0;
          Serial.println(value);
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print(ikey);
        }

       else if (value != '*') {

        ikey = (ikey * 10) + (value - '0');
        Serial.println(value);
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print(ikey);
      }
    }
  }

  rfid.PCD_Init();
  while (!rfid.PICC_IsNewCardPresent() || !rfid.PICC_ReadCardSerial()) {


    ;
  }

  MFRC522::PICC_Type piccType = rfid.PICC_GetType(rfid.uid.sak);
  if (piccType != MFRC522::PICC_TYPE_MIFARE_MINI &&
      piccType != MFRC522::PICC_TYPE_MIFARE_1K &&
      piccType != MFRC522::PICC_TYPE_MIFARE_4K) {
    Serial.println(F("Your tag is not of type MIFARE Classic."));
    return;
  }

  unsigned long int cardid = 0;
  for (byte i = 0; i < 4; i++) {
    cardid <<= 8;
    cardid |= rfid.uid.uidByte[i];
  }
  Serial.print("cardid= ");
  Serial.println(cardid);
  sprintf(data, "user_name=GMD-01,%lu,%d", cardid, ikey);

  Serial.print("data : ");
  Serial.println(data);
  sendData(data);
  delay(10000);
}

void sendData(char *data) {

  char httpdata[100] = "";
  int i = 0;
  EthernetClient client;
  Serial.println("Trying to connect server");
 
  if (client.connect("park.insidelogicsoft.com", 80))
  {

    Serial.println("Connected to server");
    client.println("POST /machine_transaction_api.php HTTP/1.1");//REPLACE WITH YOUR URLS
    client.println("Host: www.park.insidelogicsoft.com");
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.println("Connection: close");
    client.print("Content-Length:");
    client.println(strlen(data));
    client.println();
    client.print(data);
    delay(1000);
    
    while (client.connected()) {
      if (client.available()) {
        httpdata[i++] = (char)client.read();
      } else {
        Serial.println("Client Not available");
        break;
      }
      if(httpdata[i-1]==':' || httpdata[i-1]==';') i=0;
      if(i>=99)break; 
    }
    httpdata[i]=0;
  } else {
    Serial.println("Client connect failed");
     digitalWrite(A2, HIGH);
    lcd.clear();
    lcd.setCursor (0, 0);
    lcd.print(" Network failed");
     delay(3000);
    digitalWrite(A2, LOW);
  }
  


  if (strstr(httpdata , "Card") != NULL) {
    digitalWrite(A2, HIGH);
    Serial.println("Invalid Card");
    lcd.clear();
    lcd.setCursor (0, 0);
    lcd.print("Invalid Card");

    delay(3000);
    digitalWrite(A2, LOW);
    delay(3000);
  } else if (strstr(httpdata , "CB") != NULL) {
    char *str = strstr(httpdata , "CB");
    Serial.println(str);

    int curr_bal ;
    int ride_cost;
    int rem_bal;
    char string[30];
    sscanf(str, "CB - %d, DR - %d, RB - %d Transaction %s", &curr_bal , &ride_cost , &rem_bal , string);
    digitalWrite(A3, HIGH);
    Serial.print("Current Balance - ");
    Serial.println(curr_bal);
    Serial.print("ride_cost - ");
    Serial.println(ride_cost);
    Serial.print("Remain - ");
    Serial.println(rem_bal);
    delay(2000);
    lcd.clear();
    lcd.setCursor (0, 0);
    lcd.print("ride cost  - ");
    lcd.print(ride_cost);
    lcd.print("rs");
    
    lcd.setCursor (0, 1);
    lcd.print("rem bal - ");
    lcd.print(rem_bal);
    lcd.print("rs");

    delay (3000);
    digitalWrite(A3, LOW);
  }
  else if (strstr(httpdata , "insufficient balance") != NULL) {
    digitalWrite(A2, HIGH);
    lcd.clear();
    lcd.setCursor (0, 0);
    lcd.print("insufficient balance");
    Serial.println("insufficient balance");
    delay (1000);
    digitalWrite(A2, LOW);
  }
  else if (strstr(httpdata , "not") != NULL) {
    digitalWrite(A2, HIGH);
    lcd.clear();
    lcd.setCursor (0, 0);
    lcd.print("Balance not");
    lcd.setCursor (0, 1);
    lcd.print("Available");
    Serial.println("Balance not Available");
    delay (1000);
    digitalWrite(A2, LOW);
  }
}